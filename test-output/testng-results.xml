<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="3" failed="3" ignored="6" total="16" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="82422" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:18:25Z">
    <groups>
    </groups>
    <test name="Test1" duration-ms="47474" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:17:50Z">
      <class name="testcases.TC002_LoginForFailure">
        <test-method status="PASS" signature="setData()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="setData" is-config="true" duration-ms="2" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:17:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setData -->
        <test-method status="PASS" signature="setData()[pri:0, instance:testcases.TC003_CreateLeads@1d4520b]" name="setData" is-config="true" duration-ms="0" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:17:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setData -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="beforeClass" is-config="true" duration-ms="1" started-at="2018-06-25T11:17:33Z" finished-at="2018-06-25T11:17:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="beforeMethod" is-config="true" duration-ms="9667" started-at="2018-06-25T11:17:33Z" finished-at="2018-06-25T11:17:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="loginAndLogout(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="loginAndLogout" duration-ms="6939" started-at="2018-06-25T11:17:43Z" data-provider="fetchData" finished-at="2018-06-25T11:17:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DemoSalesManager]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[password was empty reenter]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAndLogout -->
        <test-method status="FAIL" signature="afterMethod()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="afterMethod" is-config="true" duration-ms="575" started-at="2018-06-25T11:17:49Z" finished-at="2018-06-25T11:17:50Z">
          <exception class="java.lang.RuntimeException">
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException
at utils.Reporter.reportStep(Reporter.java:60)
at wdMethods.SeMethods.closeAllBrowsers(SeMethods.java:385)
at wdMethods.ProjectMethods.afterMethod(ProjectMethods.java:47)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:458)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="SKIP" signature="beforeMethod()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-25T11:17:50Z" finished-at="2018-06-25T11:17:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="SKIP" signature="loginAndLogout(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="loginAndLogout" duration-ms="0" started-at="2018-06-25T11:17:50Z" data-provider="fetchData" finished-at="2018-06-25T11:17:50Z">
          <exception class="java.lang.RuntimeException">
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException
at utils.Reporter.reportStep(Reporter.java:60)
at wdMethods.SeMethods.closeAllBrowsers(SeMethods.java:385)
at wdMethods.ProjectMethods.afterMethod(ProjectMethods.java:47)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:458)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAndLogout -->
        <test-method status="SKIP" signature="afterMethod()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="afterMethod" is-config="true" duration-ms="0" started-at="2018-06-25T11:17:50Z" finished-at="2018-06-25T11:17:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="SKIP" signature="beforeMethod()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-25T11:17:50Z" finished-at="2018-06-25T11:17:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="SKIP" signature="loginAndLogout(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="loginAndLogout" duration-ms="0" started-at="2018-06-25T11:17:50Z" data-provider="fetchData" finished-at="2018-06-25T11:17:50Z">
          <exception class="java.lang.RuntimeException">
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException
at utils.Reporter.reportStep(Reporter.java:60)
at wdMethods.SeMethods.closeAllBrowsers(SeMethods.java:385)
at wdMethods.ProjectMethods.afterMethod(ProjectMethods.java:47)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:458)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAndLogout -->
        <test-method status="SKIP" signature="afterMethod()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="afterMethod" is-config="true" duration-ms="0" started-at="2018-06-25T11:17:50Z" finished-at="2018-06-25T11:17:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="SKIP" signature="beforeMethod()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2018-06-25T11:17:50Z" finished-at="2018-06-25T11:17:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="SKIP" signature="loginAndLogout(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="loginAndLogout" duration-ms="0" started-at="2018-06-25T11:17:50Z" data-provider="fetchData" finished-at="2018-06-25T11:17:50Z">
          <exception class="java.lang.RuntimeException">
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException
at utils.Reporter.reportStep(Reporter.java:60)
at wdMethods.SeMethods.closeAllBrowsers(SeMethods.java:385)
at wdMethods.ProjectMethods.afterMethod(ProjectMethods.java:47)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:458)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAndLogout -->
        <test-method status="SKIP" signature="afterMethod()[pri:0, instance:testcases.TC002_LoginForFailure@e63ade]" name="afterMethod" is-config="true" duration-ms="0" started-at="2018-06-25T11:17:50Z" finished-at="2018-06-25T11:17:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testcases.TC002_LoginForFailure -->
      <class name="testcases.TC003_CreateLeads">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:testcases.TC003_CreateLeads@1d4520b]" name="beforeSuite" is-config="true" duration-ms="1101" started-at="2018-06-25T11:17:02Z" finished-at="2018-06-25T11:17:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testcases.TC003_CreateLeads@1d4520b]" name="beforeClass" is-config="true" duration-ms="2" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:17:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:testcases.TC003_CreateLeads@1d4520b]" name="beforeMethod" is-config="true" duration-ms="12318" started-at="2018-06-25T11:17:04Z" finished-at="2018-06-25T11:17:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="createLeads(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC003_CreateLeads@1d4520b]" name="createLeads" duration-ms="6022" started-at="2018-06-25T11:17:16Z" data-provider="fetchData" finished-at="2018-06-25T11:17:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DemoSalesManager]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[crmsfa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[ZOHO]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Sudharson]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Arulgnanam]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.RuntimeException">
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException
at utils.Reporter.reportStep(Reporter.java:60)
at utils.Reporter.reportStep(Reporter.java:70)
at wdMethods.SeMethods.click(SeMethods.java:135)
at pages.LoginPage.clickLogIn(LoginPage.java:42)
at testcases.TC003_CreateLeads.createLeads(TC003_CreateLeads.java:28)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createLeads -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:testcases.TC003_CreateLeads@1d4520b]" name="afterMethod" is-config="true" duration-ms="10188" started-at="2018-06-25T11:17:23Z" finished-at="2018-06-25T11:17:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:testcases.TC003_CreateLeads@1d4520b]" name="afterTest" is-config="true" duration-ms="1" started-at="2018-06-25T11:17:50Z" finished-at="2018-06-25T11:17:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:testcases.TC003_CreateLeads@1d4520b]" name="afterSuite" is-config="true" duration-ms="1355" started-at="2018-06-25T11:18:25Z" finished-at="2018-06-25T11:18:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- testcases.TC003_CreateLeads -->
    </test> <!-- Test1 -->
    <test name="Test" duration-ms="82422" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:18:25Z">
      <class name="testcases.TC002_LoginForFailure">
        <test-method status="PASS" signature="setData()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="setData" is-config="true" duration-ms="0" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:17:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setData -->
        <test-method status="PASS" signature="setData()[pri:0, instance:testcases.TC003_CreateLeads@3108bc]" name="setData" is-config="true" duration-ms="2" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:17:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setData -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="beforeClass" is-config="true" duration-ms="1" started-at="2018-06-25T11:17:33Z" finished-at="2018-06-25T11:17:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="beforeMethod" is-config="true" duration-ms="9796" started-at="2018-06-25T11:17:33Z" finished-at="2018-06-25T11:17:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="loginAndLogout(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="loginAndLogout" duration-ms="5851" started-at="2018-06-25T11:17:43Z" data-provider="fetchData" finished-at="2018-06-25T11:17:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DemoSalesManager]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[password was empty reenter]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.RuntimeException">
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException
at utils.Reporter.reportStep(Reporter.java:60)
at utils.Reporter.reportStep(Reporter.java:70)
at wdMethods.SeMethods.click(SeMethods.java:135)
at pages.LoginPage.clickLogInForFailer(LoginPage.java:47)
at testcases.TC002_LoginForFailure.loginAndLogout(TC002_LoginForFailure.java:28)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAndLogout -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="afterMethod" is-config="true" duration-ms="1001" started-at="2018-06-25T11:17:49Z" finished-at="2018-06-25T11:17:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="beforeMethod" is-config="true" duration-ms="10565" started-at="2018-06-25T11:17:50Z" finished-at="2018-06-25T11:18:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="loginAndLogout(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="loginAndLogout" duration-ms="2502" started-at="2018-06-25T11:18:01Z" data-provider="fetchData" finished-at="2018-06-25T11:18:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[crmsfa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[username was empty reenter]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAndLogout -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="afterMethod" is-config="true" duration-ms="650" started-at="2018-06-25T11:18:03Z" finished-at="2018-06-25T11:18:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="beforeMethod" is-config="true" duration-ms="6073" started-at="2018-06-25T11:18:04Z" finished-at="2018-06-25T11:18:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="loginAndLogout(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="loginAndLogout" duration-ms="2823" started-at="2018-06-25T11:18:10Z" data-provider="fetchData" finished-at="2018-06-25T11:18:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DemoSalesManager1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[crmsfa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[User not found.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAndLogout -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="afterMethod" is-config="true" duration-ms="671" started-at="2018-06-25T11:18:13Z" finished-at="2018-06-25T11:18:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="beforeMethod" is-config="true" duration-ms="8358" started-at="2018-06-25T11:18:13Z" finished-at="2018-06-25T11:18:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="loginAndLogout(java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="loginAndLogout" duration-ms="2721" started-at="2018-06-25T11:18:22Z" data-provider="fetchData" finished-at="2018-06-25T11:18:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DemoSalesManager]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[crmsfa1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Password incorrect.]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginAndLogout -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:testcases.TC002_LoginForFailure@10736d9]" name="afterMethod" is-config="true" duration-ms="639" started-at="2018-06-25T11:18:24Z" finished-at="2018-06-25T11:18:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testcases.TC002_LoginForFailure -->
      <class name="testcases.TC003_CreateLeads">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testcases.TC003_CreateLeads@3108bc]" name="beforeClass" is-config="true" duration-ms="2" started-at="2018-06-25T11:17:03Z" finished-at="2018-06-25T11:17:03Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:testcases.TC003_CreateLeads@3108bc]" name="beforeMethod" is-config="true" duration-ms="12164" started-at="2018-06-25T11:17:04Z" finished-at="2018-06-25T11:17:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="createLeads(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)[pri:0, instance:testcases.TC003_CreateLeads@3108bc]" name="createLeads" duration-ms="16318" started-at="2018-06-25T11:17:16Z" data-provider="fetchData" finished-at="2018-06-25T11:17:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[DemoSalesManager]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[crmsfa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[ZOHO]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[Sudharson]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[Arulgnanam]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.RuntimeException">
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException
at utils.Reporter.reportStep(Reporter.java:60)
at utils.Reporter.reportStep(Reporter.java:70)
at wdMethods.SeMethods.click(SeMethods.java:135)
at pages.HomePage.clickCrmSfa(HomePage.java:38)
at testcases.TC003_CreateLeads.createLeads(TC003_CreateLeads.java:29)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createLeads -->
        <test-method status="FAIL" signature="afterMethod()[pri:0, instance:testcases.TC003_CreateLeads@3108bc]" name="afterMethod" is-config="true" duration-ms="1014" started-at="2018-06-25T11:17:32Z" finished-at="2018-06-25T11:17:33Z">
          <exception class="java.lang.RuntimeException">
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException
at utils.Reporter.reportStep(Reporter.java:60)
at wdMethods.SeMethods.closeAllBrowsers(SeMethods.java:385)
at wdMethods.ProjectMethods.afterMethod(ProjectMethods.java:47)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:59)
at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:458)
at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:222)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:646)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:40)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:489)
at org.testng.internal.thread.ThreadUtil$1.call(ThreadUtil.java:52)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:testcases.TC003_CreateLeads@3108bc]" name="afterTest" is-config="true" duration-ms="0" started-at="2018-06-25T11:18:25Z" finished-at="2018-06-25T11:18:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- testcases.TC003_CreateLeads -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
